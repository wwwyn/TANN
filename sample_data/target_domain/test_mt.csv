real_words,words,tags,length,topic_vector
"delta execution for efficient state space exploration of object oriented programs . state space exploration is the essence of model checking and an increasingly popular approach for automating test generation . a key issue in exploration of object oriented programs is handling the program state , in particular the heap . previous research has focused on standard program execution that operates on one state heap . we present delta execution , a technique that simultaneously operates on several states heaps . it exploits the fact that many execution paths in state space exploration partially overlap and speeds up the exploration by sharing the common parts across the executions and separately executing only the deltas ' ' where the executions differ . we have implemented delta execution in jpf , a popular general purpose model checker for java programs , and in box , a specialized model checker that we have developed for efficient exploration of sequential java programs . we have evaluated delta execution for ( bounded ) exhaustive exploration of ten basic subject programs without errors . the experimental results show that on average delta execution improves the exploration time 00 . 00x ( over an order of magnitude ) in jpf and 0 . 00x in box . we have also evaluated delta execution for one larger case study with errors , where the exploration time improved up to 0 . 00x .","3566,300,12,115,148,138,978,7,155,233,175,5,148,138,978,14,4,3808,7,33,668,8,24,897,520,42,12,3444,161,371,5,9,259,795,11,978,7,155,233,175,14,1122,4,127,148,6,11,240,4,2480,5,249,132,52,862,16,340,127,300,15,3562,16,86,148,2480,5,13,73,3566,300,6,9,151,15,872,3562,16,136,1495,9717,5,34,1422,4,856,15,96,300,921,11,148,138,978,1946,2531,8,3892,269,4,978,25,815,4,312,870,401,4,2269,8,2482,2316,113,4,7168,32,32,142,4,2269,2770,5,13,47,404,3566,300,11,9381,6,9,520,209,734,33,3050,12,504,175,6,8,11,2343,6,9,1889,33,3050,15,13,47,270,12,115,978,7,957,504,175,5,13,47,674,3566,300,12,23,1381,22,3083,978,7,2581,673,1215,175,223,657,5,4,169,45,55,15,16,594,3566,300,867,4,978,44,93,5,3716,23,89,24,140,7,961,22,11,9381,8,49,5,3716,11,2343,5,13,47,64,674,3566,300,12,86,1228,231,105,18,657,6,142,4,978,44,726,269,10,49,5,3716,5","1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",235,"0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.04489388269658181,0.0001612903225806452,0.0451095325261036,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.028163491437803213,0.0001612903225806452,0.0001612903225806452,0.03816458711754618,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.0001612903225806452,0.03711590373866857,0.0001612903225806452,0.13847652343522748,0.0001612903225806452,0.26311828380933433,0.0001612903225806452,0.00903505210980068,0.375056364449022,0.014414765776686433,0.0001612903225806452,0.0001612903225806452"
"low level liquid types . we present low level liquid types , a refinement type system for c based on liquid types . low level liquid types combine refinement types with three key elements to automate verification of critical safety properties of low level programs first , by associating refinement types with individual heap locations and precisely tracking the locations referenced by pointers , our system is able to reason about complex invariants of in memory data structures and sophisticated uses of pointer arithmetic . second , by adding constructs which allow strong updates to the types of heap locations , even in the presence of aliasing , our system is able to verify properties of in memory data structures in spite of temporary invariant violations . by using this strong update mechanism , our system is able to verify the correct initialization of newly allocated regions of memory . third , by using the abstract interpretation framework of liquid types , we are able to use refinement type inference to automatically verify important safety properties without imposing an onerous annotation burden . we have implemented our approach in csolve , a tool for low level liquid type inference for c programs . we demonstrate through several examples that csolve is able to precisely infer complex invariants required to verify important safety properties , like the absence of array bounds violations and null dereferences , with a minimal annotation overhead .","319,150,3360,195,5,13,73,319,150,3360,195,6,9,1390,168,40,12,528,29,16,3360,195,5,319,150,3360,195,1085,1390,195,18,196,259,637,10,3354,671,7,662,1195,236,7,319,150,175,109,6,25,5637,1390,195,18,423,2480,1031,8,1908,759,4,1031,6457,25,2959,6,26,40,14,359,10,1794,177,199,2187,7,11,212,20,307,8,1865,322,7,2020,2793,5,341,6,25,1711,1410,31,505,956,912,10,4,195,7,2480,1031,6,256,11,4,998,7,2901,6,26,40,14,359,10,1443,236,7,11,212,20,307,11,4722,7,6991,2431,2824,5,25,38,17,956,846,618,6,26,40,14,359,10,1443,4,884,4472,7,2432,3691,940,7,212,5,1276,6,25,38,4,609,1399,95,7,3360,195,6,13,19,359,10,76,1390,168,589,10,247,1443,147,1195,236,223,5621,24,10898,1075,3821,5,13,47,404,26,42,11,3,6,9,220,12,319,150,3360,168,589,12,528,175,5,13,137,145,136,388,15,3,14,359,10,1908,1447,199,2187,512,10,1443,147,1195,236,6,305,4,2382,7,1525,1145,2824,8,3503,8170,6,18,9,1208,1075,896,5","0,0,1,3,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,1,3,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",241,"0.00015384615384615382,0.016376670593315643,0.00015384615384615382,0.015948805501743726,0.00015384615384615382,0.033007373817036466,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.021676592560973196,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.019370709613683527,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.013917752974333003,0.051044533307961784,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382,0.05042342171581974,0.00015384615384615382,0.02791182324194278,0.00015384615384615382,0.00015384615384615382,0.012357339293062859,0.00015384615384615382,0.5320214029466722,0.00015384615384615382,0.00015384615384615382,0.20009742058730107,0.00015384615384615382,0.00015384615384615382,0.00015384615384615382"
